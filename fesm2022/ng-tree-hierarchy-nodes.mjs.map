{"version":3,"file":"ng-tree-hierarchy-nodes.mjs","sources":["../../../projects/ng-tree-hierarchy-nodes/src/lib/ng-tree-hierarchy-nodes.service.ts","../../../projects/ng-tree-hierarchy-nodes/src/lib/ng-tree-hierarchy-nodes.component.ts","../../../projects/ng-tree-hierarchy-nodes/src/lib/ng-tree-structure.module.ts","../../../projects/ng-tree-hierarchy-nodes/src/public-api.ts","../../../projects/ng-tree-hierarchy-nodes/src/ng-tree-hierarchy-nodes.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { LeafNode } from './ng-tree-hierarchy-nodes.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgTreeHierarchyNodesService {\r\n  protected records = new BehaviorSubject<LeafNode[]>([]);\r\n  protected treeData!: any[];\r\n  init(data:any){\r\n    this.records.next(data)\r\n    this.treeData = data\r\n  } \r\n  \r\n  recordLisner$(){\r\n    return this.records.asObservable()\r\n  }\r\n\r\n  public filter(filterText: string) {\r\n    let filteredTreeData;\r\n    if (filterText) {\r\n      // Filter the tree\r\n      function filter(array:any, text:any) {\r\n        const getChildren = (result:any, object:any) => {\r\n          if (object.item.toLowerCase() === text.toLowerCase() || object.item.toLowerCase().startsWith(text.toLowerCase()) ) {\r\n         console.log(object.item,\"object.item\");\r\n         console.log(text,\"text\");\r\n         \r\n              result.push(object);\r\n            return result;\r\n          }\r\n          if (Array.isArray(object.children)) {\r\n            const children = object.children.reduce(getChildren, []);\r\n            if (children.length) result.push({ ...object, children });\r\n          }\r\n          return result;\r\n        };\r\n\r\n        return array.reduce(getChildren, []);\r\n      }\r\n\r\n      filteredTreeData = filter(this.treeData, filterText);\r\n    } else {\r\n      // Return the initial tree\r\n      filteredTreeData = this.treeData;\r\n    }\r\n\r\n    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested\r\n    // file node as children.\r\n    const data = filteredTreeData;\r\n    // Notify the change.\r\n    this.records.next(data);\r\n  }\r\n}\r\n","import { Component, EventEmitter, inject, Input, Output } from '@angular/core'; \r\nimport { NgTreeHierarchyNodesService } from './ng-tree-hierarchy-nodes.service';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material/tree'; \r\n// Define data models\r\nexport class ParentNode {\r\n  item!: string;\r\n  children?: ParentNode[];\r\n  [key: string]: any;\r\n}\r\nexport class TreeSelectiontype {\r\n  leafNode=\"leafNode\";\r\n  parentNode=\"parentNode\";\r\n}\r\nexport class LeafNode {\r\n  item!: string;\r\n  level!: number;\r\n  expandable!: boolean;\r\n  [key: string]: any;\r\n}\r\n\r\nexport class config {\r\n  primaryKey: string= '_id';\r\n  placeholder: string= 'No items available';\r\n  showDisabledText: string =  'Select the Item Below';\r\n  parentSelectionAvailable: boolean = false;\r\n  onSelectionToggle?: boolean= false;\r\n  expandAll?: boolean= false;\r\n} \r\n@Component({\r\n  selector: 'ng-tree-hierarchy-nodes', \r\n  template: `\r\n\r\n  JO\r\n    <mat-form-field class=\"example-full-width\">\r\n      <!-- <mat-label *ngIf=\"config.label\">{{ config.label }}</mat-label> -->\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"{{ getSelectedItems() }}\" \r\n        matInput\r\n        (input)=\"filterChanged($event.target)\"\r\n        [matAutocomplete]=\"auto\"\r\n      />\r\n      <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\r\n          <mat-option disabled>{{config[\"showDisabledText\"]}}</mat-option>\r\n\t\t\t\t<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n\t\t\t\t\t<mat-tree-node *matTreeNodeDef=\"let node\"  matTreeNodePadding>\r\n\t\t\t\t\t\t<mat-checkbox class=\"checklist-leaf-node\" [checked]=\"checklistSelection.isSelected(node)\" (change)=\"toggleLeafNodeSelection(node)\">{{node.item}}</mat-checkbox>\r\n\t\t\t\t\t</mat-tree-node>\r\n\r\n\t\t\t\t\t<mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n    <div  style=\"display: contents;margin-top:2px\">\r\n      <mat-icon class=\"mat-icon-rtl-mirror\" matTreeNodeToggle [id]=\"'toggle' + node.item\"> {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}} </mat-icon>\r\n      @if(config['parentSelectionAvailable']){\r\n        <mat-checkbox [checked]=\"descendantsAllSelected(node)\" [indeterminate]=\"descendantsPartiallySelected(node)\" (change)=\"todoItemSelectionToggle(node,'toggle' + node.item)\"></mat-checkbox>\r\n      }\r\n      {{node.item}}\r\n      \r\n    </div>\r\n\t\t\t\t\t</mat-tree-node>\r\n\t\t\t\t</mat-tree>\r\n\t\t\t</mat-autocomplete> \r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .example-tree-invisible {\r\n        display: none;\r\n      }\r\n\r\n      .example-tree ul,\r\n      .example-tree li {\r\n        margin-top: 0;\r\n        margin-bottom: 0;\r\n        list-style-type: none;\r\n      }\r\n\r\n      .example-form {\r\n        min-width: 150px;\r\n        max-width: 500px;\r\n        width: 100%;\r\n      }\r\n\r\n      .example-full-width {\r\n        width: 100%;\r\n      }\r\n\r\n      .tree-toggle {\r\n        display: contents;\r\n        margin-top: 2px;\r\n      }\r\n    `\r\n  ]\r\n})\r\nexport class NgTreeHierarchyNodesComponent {\r\n  @Output() ngModelChanage = new EventEmitter<any>(true);\r\n  @Input() data: ParentNode[] =[];\r\n  @Input() selectedValue: any[] =[];\r\n  @Input() config: {\r\n    primaryKey?: string;\r\n    placeholder?: string;\r\n    showDisabledText?: string;\r\n    parentSelectionAvailable?: boolean;\r\n    onSelectionToggle?: boolean;\r\n    expandAll?: boolean;\r\n  } = {\r\n    primaryKey: '_id',\r\n    showDisabledText: 'No items available',\r\n    placeholder:\"Select items\",\r\n    parentSelectionAvailable: false,\r\n    onSelectionToggle:false,\r\n    expandAll:false\r\n  };\r\n  checklistSelection = new SelectionModel<LeafNode>(true);\r\n  treeControl!: FlatTreeControl<LeafNode>;\r\n  treeFlattener!: MatTreeFlattener<ParentNode, LeafNode>;\r\n  dataSource!: MatTreeFlatDataSource<ParentNode, LeafNode>;\r\n\r\n  flatNodeMap = new Map<LeafNode, ParentNode>();\r\n  nestedNodeMap = new Map<ParentNode, LeafNode>();\r\n  private TreeStructService = inject(NgTreeHierarchyNodesService);\r\n\r\n  ngOnInit() {\r\n    console.error(\"INIT\");\r\n    this.treeFlattener = new MatTreeFlattener(\r\n      this.transformer,\r\n      this.getLevel,\r\n      this.isExpandable,\r\n      this.getChildren\r\n    );\r\n\r\n    this.treeControl = new FlatTreeControl<LeafNode>(\r\n      this.getLevel,\r\n      this.isExpandable\r\n    );\r\n\r\n    this.dataSource = new MatTreeFlatDataSource(\r\n      this.treeControl,\r\n      this.treeFlattener\r\n    );\r\n    console.log(this.data);\r\n    \r\n    this.TreeStructService.init(this.data)\r\n    this.TreeStructService.recordLisner$().subscribe((data:any) => {\r\n      console.log(this);\r\n      \r\n      this.dataSource.data = data;\r\n      if(this.config.expandAll){\r\n        this.treeControl.expandAll();\r\n      }     \r\n      \r\n    });\r\n    console.log(this);\r\n    \r\n  if (this.selectedValue.length>0) this.setDefaultSelected(this.selectedValue) ;\r\n  }\r\n\r\n  transformer = (node: ParentNode, level: number) => {\r\n    const flatNode = this.nestedNodeMap.get(node) || new LeafNode();\r\n    flatNode.item = node.item;\r\n    flatNode.level = level;\r\n    flatNode.expandable = !!node.children;\r\n    flatNode[this.config.primaryKey!] = node[this.config.primaryKey!];\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n    return flatNode;\r\n  };\r\n\r\n  getLevel = (node: LeafNode) => node.level || 0;\r\n  isExpandable = (node: LeafNode) => node.expandable || false;\r\n  getChildren = (node: ParentNode): ParentNode[] => node.children || [];\r\n  hasChild = (_: number, node: LeafNode) => node.expandable;\r\n\r\n  toggleLeafNodeSelection(node: LeafNode): void {\r\n    this.checklistSelection.toggle(node); \r\n    if(this.config['parentSelectionAvailable']){\r\n      this.checkAllParentsSelection(node);\r\n    }\r\n    this.emitSelectedItems(new TreeSelectiontype().leafNode)\r\n  }\r\n\r\n  checkAllParentsSelection(node: LeafNode): void {\r\n    let parent = this.getParentNode(node);\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n  }\r\n\r\n  checkRootNodeSelection(node: LeafNode): void {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const allSelected = descendants.every((child) =>\r\n      this.checklistSelection.isSelected(child)\r\n    );\r\n    allSelected\r\n      ? this.checklistSelection.select(node)\r\n      : this.checklistSelection.deselect(node);\r\n  }\r\n\r\n  getParentNode(node: LeafNode): LeafNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n    if (currentLevel < 1) return null;\r\n\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getSelectedItems(): string {\r\n    return (\r\n      this.checklistSelection.selected.map((node) => node.item).join(', ') ||\r\n      this.config.placeholder!\r\n    );\r\n  }\r\n\r\n  descendantsAllSelected(node: LeafNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    return descendants.every((child) =>\r\n      this.checklistSelection.isSelected(child)\r\n    );\r\n  }\r\n\r\n  descendantsPartiallySelected(node: LeafNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some((child) =>\r\n      this.checklistSelection.isSelected(child)\r\n    );\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  todoItemSelectionToggle(node: LeafNode,id:any): void {\r\n    if(this.config['onSelectionToggle']){\r\n      (document.getElementById(id) as HTMLElement).click()\r\n    }\r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    \r\n    if (this.checklistSelection.isSelected(node)) {\r\n      this.checklistSelection.select(...descendants);\r\n    } else {\r\n      this.checklistSelection.deselect(...descendants);\r\n    }\r\n    \r\n    this.checkAllParentsSelection(node);\r\n    this.emitSelectedItems(new TreeSelectiontype().parentNode)\r\n  }\r\n \r\n  filterChanged(event: any) {\r\n    this.TreeStructService.filter(event['value'])\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n  setDefaultSelected(selectedKeys: any[]): void {\r\n    if(selectedKeys.length == 0) {\r\n      console.log(\"No Data Available\");\r\n      return\r\n    }\r\n    console.log(\"Data Available\",selectedKeys);\r\n    const dataNodes = this.treeControl.dataNodes;\r\n    selectedKeys.forEach((key) => {\r\n      const node = dataNodes.find((n) => n[this.config.primaryKey!] === key[this.config.primaryKey!]);\r\n      if (node) {\r\n        this.checklistSelection.select(node);\r\n  \r\n        // Ensure all parent nodes are updated\r\n        this.checkAllParentsSelection(node);\r\n      }\r\n    }); \r\n  }\r\n  \r\n\r\n\r\n  emitSelectedItems(type:any): void {\r\n    const selectedItems = this.checklistSelection.selected\r\n    this.ngModelChanage.emit({type,value:selectedItems});\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';  \r\nimport { NgTreeHierarchyNodesComponent } from './ng-tree-hierarchy-nodes.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n@NgModule({\r\n  declarations: [NgTreeHierarchyNodesComponent],\r\n  imports: [\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatTreeModule,\r\n    MatIconModule,MatAutocompleteModule,\r\n    CommonModule\r\n  ],\r\n  exports: [NgTreeHierarchyNodesComponent]\r\n})\r\nexport class NgTreeStructureModule { }\r\n","/*\r\n * Public API Surface of ng-tree-hierarchy-nodes\r\n */\r\n\r\nexport * from './lib/ng-tree-hierarchy-nodes.service';\r\nexport * from './lib/ng-tree-hierarchy-nodes.component';\r\nexport * from './lib/ng-tree-structure.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}